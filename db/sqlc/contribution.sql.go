// Code generated by sqlc. DO NOT EDIT.
// source: contribution.sql

package db

import (
	"context"
	"database/sql"
)

const createContribution = `-- name: CreateContribution :one
INSERT INTO contributions (
  value, pullRequest, type, key, merged, companyId
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, pullrequest, value, type, key, merged, companyid, createdat
`

type CreateContributionParams struct {
	Value       sql.NullInt32
	Pullrequest string
	Type        string
	Key         string
	Merged      sql.NullBool
	Companyid   int32
}

func (q *Queries) CreateContribution(ctx context.Context, arg CreateContributionParams) (Contribution, error) {
	row := q.db.QueryRowContext(ctx, createContribution,
		arg.Value,
		arg.Pullrequest,
		arg.Type,
		arg.Key,
		arg.Merged,
		arg.Companyid,
	)
	var i Contribution
	err := row.Scan(
		&i.ID,
		&i.Pullrequest,
		&i.Value,
		&i.Type,
		&i.Key,
		&i.Merged,
		&i.Companyid,
		&i.Createdat,
	)
	return i, err
}

const deleteContribution = `-- name: DeleteContribution :exec
DELETE FROM contributions
`

func (q *Queries) DeleteContribution(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteContribution)
	return err
}

const getContribution = `-- name: GetContribution :one
SELECT id, pullrequest, value, type, key, merged, companyid, createdat FROM contributions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContribution(ctx context.Context, id int32) (Contribution, error) {
	row := q.db.QueryRowContext(ctx, getContribution, id)
	var i Contribution
	err := row.Scan(
		&i.ID,
		&i.Pullrequest,
		&i.Value,
		&i.Type,
		&i.Key,
		&i.Merged,
		&i.Companyid,
		&i.Createdat,
	)
	return i, err
}

const listContributions = `-- name: ListContributions :many
SELECT id, pullrequest, value, type, key, merged, companyid, createdat FROM contributions
ORDER BY id
`

func (q *Queries) ListContributions(ctx context.Context) ([]Contribution, error) {
	rows, err := q.db.QueryContext(ctx, listContributions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contribution
	for rows.Next() {
		var i Contribution
		if err := rows.Scan(
			&i.ID,
			&i.Pullrequest,
			&i.Value,
			&i.Type,
			&i.Key,
			&i.Merged,
			&i.Companyid,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContribution = `-- name: UpdateContribution :exec
UPDATE contributions 
SET value= $2, pullRequest= $3, type= $4, key= $5, merged= $6, companyId= $7
WHERE id = $1
`

type UpdateContributionParams struct {
	ID          int32
	Value       sql.NullInt32
	Pullrequest string
	Type        string
	Key         string
	Merged      sql.NullBool
	Companyid   int32
}

func (q *Queries) UpdateContribution(ctx context.Context, arg UpdateContributionParams) error {
	_, err := q.db.ExecContext(ctx, updateContribution,
		arg.ID,
		arg.Value,
		arg.Pullrequest,
		arg.Type,
		arg.Key,
		arg.Merged,
		arg.Companyid,
	)
	return err
}
