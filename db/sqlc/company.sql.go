// Code generated by sqlc. DO NOT EDIT.
// source: company.sql

package db

import (
	"context"
	"database/sql"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
  name, github, balance, "privateKey"
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, github, privateKey, balance, createdAt
`

type CreateCompanyParams struct {
	Name       string
	Github     string
	Balance    sql.NullInt32
	PrivateKey string
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.Name,
		arg.Github,
		arg.Balance,
		arg.PrivateKey,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Github,
		&i.PrivateKey,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
`

func (q *Queries) DeleteCompany(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCompany)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, github, privateKey, balance, createdAt FROM companies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Github,
		&i.PrivateKey,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, github, privateKey, balance, createdAt FROM companies
ORDER BY id
`

func (q *Queries) ListCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Github,
			&i.PrivateKey,
			&i.Balance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE companies 
SET name= $2, github= $3, balance= $4, "privateKey"= $5
WHERE id = $1
`

type UpdateCompanyParams struct {
	ID         int32
	Name       string
	Github     string
	Balance    sql.NullInt32
	PrivateKey string
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.ExecContext(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Github,
		arg.Balance,
		arg.PrivateKey,
	)
	return err
}
