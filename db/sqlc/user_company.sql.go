// Code generated by sqlc. DO NOT EDIT.
// source: user_company.sql

package db

import (
	"context"
)

const createUserCompanies = `-- name: CreateUserCompanies :one
INSERT INTO userCompanies (
  userId, companyId
) VALUES (
  $1, $2
)
RETURNING id, companyid, userid
`

type CreateUserCompaniesParams struct {
	Userid    int32
	Companyid int32
}

func (q *Queries) CreateUserCompanies(ctx context.Context, arg CreateUserCompaniesParams) (Usercompany, error) {
	row := q.db.QueryRowContext(ctx, createUserCompanies, arg.Userid, arg.Companyid)
	var i Usercompany
	err := row.Scan(&i.ID, &i.Companyid, &i.Userid)
	return i, err
}

const deleteUserCompanies = `-- name: DeleteUserCompanies :exec
DELETE FROM userCompanies
`

func (q *Queries) DeleteUserCompanies(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUserCompanies)
	return err
}

const getUserCompanies = `-- name: GetUserCompanies :one
SELECT id, companyid, userid FROM userCompanies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserCompanies(ctx context.Context, id int32) (Usercompany, error) {
	row := q.db.QueryRowContext(ctx, getUserCompanies, id)
	var i Usercompany
	err := row.Scan(&i.ID, &i.Companyid, &i.Userid)
	return i, err
}

const listUserCompanies = `-- name: ListUserCompanies :many
SELECT id, companyid, userid FROM userCompanies
ORDER BY id
`

func (q *Queries) ListUserCompanies(ctx context.Context) ([]Usercompany, error) {
	rows, err := q.db.QueryContext(ctx, listUserCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usercompany
	for rows.Next() {
		var i Usercompany
		if err := rows.Scan(&i.ID, &i.Companyid, &i.Userid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserCompanies = `-- name: UpdateUserCompanies :exec
UPDATE userCompanies 
SET userId= $2, companyId= $3
WHERE id = $1
`

type UpdateUserCompaniesParams struct {
	ID        int32
	Userid    int32
	Companyid int32
}

func (q *Queries) UpdateUserCompanies(ctx context.Context, arg UpdateUserCompaniesParams) error {
	_, err := q.db.ExecContext(ctx, updateUserCompanies, arg.ID, arg.Userid, arg.Companyid)
	return err
}
