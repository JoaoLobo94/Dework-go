// Code generated by sqlc. DO NOT EDIT.
// source: story.sql

package db

import (
	"context"
	"database/sql"
)

const createStory = `-- name: CreateStory :one
INSERT INTO stories (
  "voteBalance", "pullRequest", type, "privateKey", merged, "companyId", balance
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, privateKey, pullRequest, type, merged, balance, voteBalance, companyId, createdAt
`

type CreateStoryParams struct {
	VoteBalance sql.NullInt32
	PullRequest string
	Type        string
	PrivateKey  string
	Merged      sql.NullBool
	CompanyId   int32
	Balance     sql.NullInt32
}

func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) (Story, error) {
	row := q.db.QueryRowContext(ctx, createStory,
		arg.VoteBalance,
		arg.PullRequest,
		arg.Type,
		arg.PrivateKey,
		arg.Merged,
		arg.CompanyId,
		arg.Balance,
	)
	var i Story
	err := row.Scan(
		&i.ID,
		&i.PrivateKey,
		&i.PullRequest,
		&i.Type,
		&i.Merged,
		&i.Balance,
		&i.VoteBalance,
		&i.CompanyId,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStory = `-- name: DeleteStory :exec
DELETE FROM stories
`

func (q *Queries) DeleteStory(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteStory)
	return err
}

const getStory = `-- name: GetStory :one
SELECT id, privateKey, pullRequest, type, merged, balance, voteBalance, companyId, createdAt FROM stories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStory(ctx context.Context, id int32) (Story, error) {
	row := q.db.QueryRowContext(ctx, getStory, id)
	var i Story
	err := row.Scan(
		&i.ID,
		&i.PrivateKey,
		&i.PullRequest,
		&i.Type,
		&i.Merged,
		&i.Balance,
		&i.VoteBalance,
		&i.CompanyId,
		&i.CreatedAt,
	)
	return i, err
}

const listStories = `-- name: ListStories :many
SELECT id, privateKey, pullRequest, type, merged, balance, voteBalance, companyId, createdAt FROM stories
ORDER BY id
`

func (q *Queries) ListStories(ctx context.Context) ([]Story, error) {
	rows, err := q.db.QueryContext(ctx, listStories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Story
	for rows.Next() {
		var i Story
		if err := rows.Scan(
			&i.ID,
			&i.PrivateKey,
			&i.PullRequest,
			&i.Type,
			&i.Merged,
			&i.Balance,
			&i.VoteBalance,
			&i.CompanyId,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStory = `-- name: UpdateStory :exec
UPDATE stories 
SET "voteBalance"= $2, "pullRequest"= $3, type= $4, "privateKey"= $5, merged= $6, "companyId"= $7, balance= $8
WHERE id = $1
`

type UpdateStoryParams struct {
	ID          int32
	VoteBalance sql.NullInt32
	PullRequest string
	Type        string
	PrivateKey  string
	Merged      sql.NullBool
	CompanyId   int32
	Balance     sql.NullInt32
}

func (q *Queries) UpdateStory(ctx context.Context, arg UpdateStoryParams) error {
	_, err := q.db.ExecContext(ctx, updateStory,
		arg.ID,
		arg.VoteBalance,
		arg.PullRequest,
		arg.Type,
		arg.PrivateKey,
		arg.Merged,
		arg.CompanyId,
		arg.Balance,
	)
	return err
}
